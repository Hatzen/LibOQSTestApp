plugins {
    id 'com.android.library'
    id 'org.ajoberstar.grgit' version '4.0.2' apply false
}
import org.ajoberstar.grgit.Grgit


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        // https://developer.android.com/ndk/guides/abis#gc
        ndk {
            // Only support 64 bit systems (as liboqs does not build others yet #2 and #3)
            abiFilters 'arm64-v8a', 'x86_64'
        }
    }

    buildTypes {
        release {
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            // Tells Gradle to put outputs/logs from external native
            // builds in the path specified below.
            buildStagingDirectory "./outputs/ndk-build"
            path 'jni/Android.mk'
            // Verbose: https://stackoverflow.com/a/44578257/8524651
        }
    }

    // Needed after adding junit-jupiter: https://stackoverflow.com/questions/44342455/more-than-one-file-was-found-with-os-independent-path-meta-inf-license
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

// maybe use $projectDir ?
def prebuiltRoot = 'prebuild-liboqs'
def liboqsScriptsDir = "$prebuiltRoot/liboqs/scripts"
def liboqsBuildDir = "$prebuiltRoot/liboqs/build"
def ndkPath = "$prebuiltRoot/android-ndk-r21"
def jniLibDir = "jni/jniLibs"

tasks.register('cloneLiboqs') {
    // https://stackoverflow.com/a/24195891/8524651
    Grgit.clone(dir: file("$prebuiltRoot/liboqs"), uri: 'git@github.com:open-quantum-safe/liboqs.git')
}

tasks.register('initEnv') {
    // workingDir prebuiltRoot
    'apt-get update'
    'wget https://dl.google.com/android/repository/android-ndk-r21-linux-x86_64.zip '
    'apt-get install unzip'
    'unzip android-ndk-r21-linux-x86_64.zip'
    'apt-get install -y build-essential cmake libssl-dev'
}

tasks.register('buildAllLibs') {
    doLast {
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            System.err.println("Need unix system for compiling prebuild liboqs.so files")
        }
        dependsOn 'cloneLiboqs'
        // workingDir $liboqsScriptsDir
        // workingDir "$projectDir"

        def sdkVersion = 19
        def abis = ['x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a']
        abis.each { abi ->
            System.out.println("Start Build for abi $abi")
            def logFile = file("$jniLibDir/$abi/build-android-log.txt")

            // Cleanup.
            if(logFile.exists()){
                logFile.delete()
            }

            def process = "build-android.sh $ndkPath -s $sdkVersion -a $abi".execute()
            process.waitForProcessOutput(System.out, logFile.newDataOutputStream())
            def exitCode = process.exitValue()
            if (exitCode == 0) {
                System.out.println("Build successful for abi $abi see logfile $logFile for more infos.")
                // Copy created .so file.
                def liboqsFile = file("$liboqsBuildDir/liboqs.so")
                def abiFile = file("$jniLibDir/liboqs.so")
                Files.copy(liboqsFile, abiFile)
                // TODO: Remove log file.

                // TODO: Copy include folder..
            } else {
                System.err.println("Failed to build abi $abi see logfile $logFile for more infos.")
            }
        }
    }
}